import logging
import uuid
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, 
    MessageHandler, ConversationHandler, ContextTypes, filters
)

from config import *
from keyboards import *
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if context.args:
        await handle_referral(update, context)
    
    await update.message.reply_text(
        "üöÄ Welcome to CRYPTOCRIP CLUB! / –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRYPTOCRIP CLUB!\n\n"
        "Please select your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=create_language_keyboard()
    )
    return LANGUAGE_SELECT

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    lang = 'ru' if query.data == 'lang_ru' else 'en'
    context.user_data['language'] = lang
    
    user_is_admin = is_admin(update.effective_user.id)
    employees = db.get_employees()
    user_is_employee = str(update.effective_user.id) in employees
    
    if lang == 'ru':
        text = "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRYPTOCRIP CLUB!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    else:
        text = "üöÄ Welcome to CRYPTOCRIP CLUB!\n\nSelect the section you're interested in:"
    
    await query.edit_message_text(text)
    await query.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == 'ru' else "Main menu:",
        reply_markup=create_main_menu_keyboard(lang, user_is_admin, user_is_employee)
    )
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    lang = context.user_data.get('language', 'ru')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè† Main Menu"]:
        user_is_admin = is_admin(update.effective_user.id)
        employees = db.get_employees()
        user_is_employee = str(update.effective_user.id) in employees
        if lang == 'ru':
            await update.message.reply_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=create_main_menu_keyboard(lang, user_is_admin, user_is_employee)
            )
        else:
            await update.message.reply_text(
                "Main menu:",
                reply_markup=create_main_menu_keyboard(lang, user_is_admin, user_is_employee)
            )
        return MAIN_MENU
    
    elif text in ["üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "üîó My Referral Link"]:
        employees = db.get_employees()
        user_id = str(update.effective_user.id)
        
        if user_id in employees:
            referral_link = employees[user_id].get('referral_link', '')
            if lang == 'ru':
                await update.message.reply_text(
                    f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{referral_link}\n\n–î–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏!"
                )
            else:
                await update.message.reply_text(
                    f"üîó Your referral link:\n\n{referral_link}\n\nShare it with clients!"
                )
        else:
            if lang == 'ru':
                await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.")
            else:
                await update.message.reply_text("You are not an employee.")
        return MAIN_MENU
    
    if text in ["üî• VIP –ö—Ä–∏–ø—Ç–æ–∫–ª—É–±", "üî• VIP Crypto Club"]:
        if lang == 'ru':
            await update.message.reply_text(
                "üîí –ù–ê–ë–û–† –í –ó–ê–ö–†–´–¢–û–ï –°–û–û–ë–©–ï–°–¢–í–û\n\n"
                "<a href='https://t.me/thecryptocrip/9324'>VIP –∫–∞–Ω–∞–ª</a> —á–µ–º –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ?\n\n"
                "üîπ–í –Ω–µ–º —è –¥–µ–ª—é—Å—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤–æ–∏—Ö —Å–¥–µ–ª–∫–∞—Ö, —Å–æ—Å—Ç–∞–≤–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è, –º—ã—Å–ª—è–º–∏, –º–Ω–µ–Ω–∏–µ–º –æ —Ä—ã–Ω–∫–µ.\n\n"
                "üîπ–°–∫–∏–¥—ã–≤–∞—é —Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é –≤–∞—à —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.\n\n"
                "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –¥–æ 7 —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 80-90%.\n"
                "‚úÖ –ó–æ–Ω—ã –≤—Ö–æ–¥–∞ / –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã / –°—Ç–æ–ø-–ª–æ—Å—Å—ã.\n\n"
                "üîπ–°–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–ø–æ—Ç–µ: —Å —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞, –≤—ã—Ö–æ–¥–∞, —Å—Ç–æ–ø–æ–º –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏. –ü–∏—à—É –º–æ–Ω–µ—Ç—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –•10 –∏ –≤—ã—à–µ.\n\n"
                "üîπ–°–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–æ–≤—ã—Ö –¢–û–ü-–ø—Ä–æ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –±–∏—Ä–∂—É, –∏ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —á–∞—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Ö –ü–ê–ú–ü.\n\n"
                "üîπ–°—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è –≤–∞—Å –±—É–¥—É—Ç –ë–ï–°–ü–õ–ê–¢–ù–´.\n\n"
                "üîπ–ê–í–¢–û–†–°–ö–ò–ô –£–ß–ï–ë–ù–ò–ö –∏–∑ 8 —á–∞—Å—Ç–µ–π + 15 –æ–±—É—á–∞—é—â–∏—Ö –ê–í–¢–û–†–°–ö–ò–• –í–ò–î–ï–û–£–†–û–ö–û–í ¬´–í–°–Å, –ß–¢–û –Ø –ó–ù–ê–Æ¬ª ‚Äî $600, –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ VIP –∫–ª—É–±–∞ –ë–ï–°–ü–õ–ê–¢–ù–û.\n\n"
                "üîπ–û–±—É—á–∞—é—â–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî 25 –ø–ª–∞—Ç–Ω—ã—Ö –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–û.\n\n"
                "üîπSmart Money. –ü–æ–Ω–∏–º–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫—Ä—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä—ã–Ω–∫–∞ ‚Äî —Ñ–æ–Ω–¥–æ–≤ –∏ –∫–∏—Ç–æ–≤. –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.\n\n"
                "üîπ–ü—Ä–æ–≤–æ–¥–∏–º –æ–Ω—á–µ–π–Ω-–∞–Ω–∞–ª–∏–∑, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞. –í—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö, –æ–ø–µ—Ä–µ–∂–∞–µ–º —Ä–æ–∑–Ω–∏—á–Ω—ã–π —Å–ø—Ä–æ—Å, ¬´–ø–∞–¥–∞–µ–º –Ω–∞ —Ö–≤–æ—Å—Ç¬ª —Å–º–∞—Ä—Ç-–¥–µ–Ω—å–≥–∞–º –∏ –∑–∞–±–∏—Ä–∞–µ–º –∏–∫—Å—ã –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º–∏. –ó–∞—Ö–æ–¥–∏–º –≤ –∞–∫—Ç–∏–≤ –¥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. –û–Ω—á–µ–π–Ω –≥–æ–≤–æ—Ä–∏—Ç —Ä–∞–Ω—å—à–µ, —á–µ–º –≥—Ä–∞—Ñ–∏–∫–∏. –°–º–∞—Ä—Ç-–¥–µ–Ω—å–≥–∏ –∑–∞—à–ª–∏ ‚Äî –º—ã —Å–ª–µ–¥–æ–º. –î–æ —Ö–∞–π–ø–∞. –î–æ —à—É–º–∞.\n\n"
                "üîπ–ü–æ–º–æ—â—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.\n\n"
                "üîπSupport, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
                "üîπ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.\n\n"
                "üîπ–ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É.\n\n"
                "–°–∏–≥–Ω–∞–ª—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö! –ö—Ç–æ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–¥–µ–ª–∫—É —Ä–∞–Ω—å—à–µ –º–∞—Å—Å—ã –ª—é–¥–µ–π, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ–≥–¥–∞ –±–æ–ª—å—à–µ!\n\n"
                "‚ùóÔ∏è–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º VIP-–∫–ª—É–±–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                "ü§ù –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã ‚Äî <a href='https://t.me/cryptocrip_feedback'>–¢–£–¢</a>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=create_vip_plans_keyboard(lang),
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "üîí RECRUITMENT TO CLOSED COMMUNITY\n\n"
                "<a href='https://t.me/thecryptocrip/9324'>VIP channel</a> how is it different from the regular one?\n\n"
                "üîπI share operational information about my trades, portfolio composition, thoughts, market opinion.\n\n"
                "üîπI post accurate futures signals. I control your risk management, talk about trading psychology.\n\n"
                "‚úÖ Up to 7 signals daily with 80-90% accuracy.\n"
                "‚úÖ Entry zones / Take-profits / Stop-losses.\n\n"
                "üîπSpot signals: with entry, exit points, stop and explanations. I write coins with X10+ potential.\n\n"
                "üîπSignals for buying new TOP projects that are listed on exchanges, and their PUMP happens in a couple of hours.\n\n"
                "üîπLinks to paid useful resources + indicators that will be FREE for you.\n\n"
                "üîπAUTHOR'S TEXTBOOK of 8 parts + 15 educational AUTHOR'S VIDEO LESSONS 'EVERYTHING I KNOW' ‚Äî $600, FREE for VIP club members.\n\n"
                "üîπEducational literature ‚Äî 25 paid books that you will get for FREE.\n\n"
                "üîπSmart Money. Understanding the actions of large market participants ‚Äî funds and whales. Instant identification of liquidity zones.\n\n"
                "üîπWe conduct on-chain analysis, track large capital behavior. We enter positions at early stages, outpace retail demand, 'ride the tail' of smart money and take profits with them. We enter assets before mass attention. On-chain speaks earlier than charts. Smart money entered ‚Äî we follow. Before hype. Before noise.\n\n"
                "üîπHelp in adjusting your portfolio.\n\n"
                "üîπSupport that will answer all your questions.\n\n"
                "üîπInstructions for beginners.\n\n"
                "üîπRules for entering trades.\n\n"
                "You will get signals before everyone else! Those who enter trades before the masses always earn more!\n\n"
                "‚ùóÔ∏èAll information is available only to VIP club members after subscription payment.\n\n"
                "ü§ù Your reviews ‚Äî <a href='https://t.me/cryptocrip_feedback'>HERE</a>\n\n"
                "Choose subscription plan:",
                reply_markup=create_vip_plans_keyboard(lang),
                parse_mode='HTML'
            )
        return VIP_PLAN_SELECT
    
    elif text in ["üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "üì¢ Subscribe to Channel"]:
        if lang == 'ru':
            await update.message.reply_text(
                "–ß—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã,\n"
                "–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª:\n\n"
                "üîó https://t.me/thecryptocrip\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –º–µ–Ω—é."
            )
        else:
            await update.message.reply_text(
                "To stay updated with the latest news and receive signals,\n"
                "subscribe to our Telegram channel:\n\n"
                "üîó https://t.me/thecryptocrip\n\n"
                "After subscribing, return to the menu."
            )
        return MAIN_MENU
    
    elif text in ["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", "üë• Employee Management"]:
        if update.effective_user.id == ADMIN_ID:
            if lang == 'ru':
                await update.message.reply_text(
                    "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=create_employee_keyboard(lang)
                )
            else:
                await update.message.reply_text(
                    "üë• Employee Management\n\n"
                    "Select action:",
                    reply_markup=create_employee_keyboard(lang)
                )
            return EMPLOYEE_MENU
        else:
            if lang == 'ru':
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            else:
                await update.message.reply_text("You don't have access to this function")
            return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
async def experience_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    lang = context.user_data.get('language', 'ru')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè† Main Menu"]:
        is_admin = update.effective_user.id == ADMIN_ID
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == 'ru' else "Main menu:",
            reply_markup=create_main_menu_keyboard(lang, is_admin)
        )
        return MAIN_MENU
    
    context.user_data['experience'] = text
    
    if lang == 'ru':
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {text}\n\n"
            "–° –∫–∞–∫–æ–π —Å—É–º–º–æ–π –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            reply_markup=create_amount_keyboard(lang)
        )
    else:
        await update.message.reply_text(
            f"You selected experience level: {text}\n\n"
            "What amount are you ready to start with?",
            reply_markup=create_amount_keyboard(lang)
        )
    return TRADING_AMOUNT

async def amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    lang = context.user_data.get('language', 'ru')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè† Main Menu"]:
        is_admin = update.effective_user.id == ADMIN_ID
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == 'ru' else "Main menu:",
            reply_markup=create_main_menu_keyboard(lang, is_admin)
        )
        return MAIN_MENU
    
    context.user_data['amount'] = text
    
    if lang == 'ru':
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—É–º–º—É: {text}\n\n"
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –±–∏—Ä–∂–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–µ–ø–æ–∑–∏—Ç–∞",
            reply_markup=ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            f"You selected amount: {text}\n\n"
            "Attach a screenshot from the exchange confirming the deposit",
            reply_markup=ReplyKeyboardMarkup([["üè† Main Menu"]], resize_keyboard=True)
        )
    return TRADING_SCREENSHOT

async def screenshot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('language', 'ru')
    
    try:
        if update.message.photo:
            photo_file = await update.message.photo[-1].get_file()
            context.user_data['screenshot'] = photo_file.file_id
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            referrer_info = ""
            if context.user_data.get('referrer_employee_name'):
                referrer_info = f"\n‚Ä¢ –û—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {context.user_data.get('referrer_employee_name')}"
            
            admin_message = (
                "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
                f"‚Ä¢ –û–ø—ã—Ç: {context.user_data.get('experience')}\n"
                f"‚Ä¢ –°—É–º–º–∞: {context.user_data.get('amount')}\n"
                f"‚Ä¢ –û—Ç: @{update.effective_user.username or '–ë–µ–∑ username'}"
                f"{referrer_info}"
            )
            for admin_id in ADMIN_IDS:
                await context.bot.send_photo(
                    chat_id=admin_id, 
                    photo=photo_file.file_id,
                    caption=admin_message
                )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            if context.user_data.get('referrer_employee_id'):
                try:
                    employee_message = (
                        "üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n"
                        f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '–ë–µ–∑ username'}\n"
                        f"–û–ø—ã—Ç: {context.user_data.get('experience')}\n"
                        f"–°—É–º–º–∞: {context.user_data.get('amount')}"
                    )
                    await context.bot.send_message(
                        chat_id=int(context.user_data['referrer_employee_id']),
                        text=employee_message
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            
            if lang == 'ru':
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=create_main_menu_keyboard(lang, update.effective_user.id == ADMIN_ID)
                )
            else:
                await update.message.reply_text(
                    "Thank you, your application has been sent.\n"
                    "Expect a response soon.",
                    reply_markup=create_main_menu_keyboard(lang, update.effective_user.id == ADMIN_ID)
                )
            return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        if lang == 'ru':
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await update.message.reply_text("An error occurred. Please try again.")
        return TRADING_SCREENSHOT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def screenshot_with_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    lang = context.user_data.get('language', 'ru')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè† Main Menu"]:
        is_admin = update.effective_user.id == ADMIN_ID
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == 'ru' else "Main menu:",
            reply_markup=create_main_menu_keyboard(lang, is_admin)
        )
        return MAIN_MENU
    
    # –ï—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    return await screenshot_handler(update, context)

# VIP Club –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def vip_plan_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get('language', 'ru')
    
    plan_prices = {
        "vip_1month": "$300",
        "vip_6months": "$600", 
        "vip_lifetime": "$900"
    }
    
    context.user_data['vip_plan'] = query.data
    price = plan_prices[query.data]
    
    if lang == 'ru':
        await query.message.reply_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ VIP –ö—Ä–∏–ø—Ç–æ–∫–ª—É–±–∞\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω: {price}\n\n"
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {price} –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (USDT TRX Tron TRC20):\n\n"
            "`THTV14nt81nZewSMG53eLn58fveyEs6dR1`\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.",
            reply_markup=ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True),
            parse_mode='Markdown'
        )
    else:
        await query.message.reply_text(
            f"üí≥ VIP Crypto Club Payment\n\n"
            f"Selected plan: {price}\n\n"
            f"Transfer {price} to wallet (USDT TRX Tron TRC20):\n\n"
            "`THTV14nt81nZewSMG53eLn58fveyEs6dR1`\n\n"
            "After payment, send a screenshot of the receipt.",
            reply_markup=ReplyKeyboardMarkup([["üè† Main Menu"]], resize_keyboard=True),
            parse_mode='Markdown'
        )
    return VIP_CLUB_PAYMENT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è VIP –ø–ª–∞—Ç–µ–∂–µ–π —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def vip_payment_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    lang = context.user_data.get('language', 'ru')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè† Main Menu"]:
        is_admin = update.effective_user.id == ADMIN_ID
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == 'ru' else "Main menu:",
            reply_markup=create_main_menu_keyboard(lang, is_admin)
        )
        return MAIN_MENU
    
    # –ï—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –ø—Ä–æ—Å–∏–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
    if lang == 'ru':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.")
    else:
        await update.message.reply_text("Please attach a screenshot of the receipt.")
    return VIP_CLUB_PAYMENT

async def vip_screenshot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('language', 'ru')
    
    try:
        if update.message.photo:
            photo_file = await update.message.photo[-1].get_file()
            
            plan_names = {
                "vip_1month": "1 –º–µ—Å—è—Ü / 1 Month",
                "vip_6months": "6 –º–µ—Å—è—Ü–µ–≤ / 6 Months",
                "vip_lifetime": "–ù–∞–≤—Å–µ–≥–¥–∞ / Lifetime"
            }
            
            plan = context.user_data.get('vip_plan', 'vip_1month')
            
            if context.user_data.get('referrer_employee_name'):
                referrer_info = f"\n–†–∞–±–æ—Ç–Ω–∏–∫ –ø—Ä–∏–≤–µ–¥—à–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {context.user_data.get('referrer_employee_name')}"
            else:
                referrer_info = "\n–†–∞–±–æ—Ç–Ω–∏–∫ –ø—Ä–∏–≤–µ–¥—à–∏–π –∫–ª–∏–µ–Ω—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            admin_message = (
                "üì• –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ VIP –ö—Ä–∏–ø—Ç–æ–∫–ª—É–±–∞!\n"
                f"–ü–ª–∞–Ω: {plan_names.get(plan, 'Unknown')}\n"
                f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '–ë–µ–∑ username'}\n"
                f"ID –∫–ª–∏–µ–Ω—Ç–∞: {update.effective_user.id}"
                f"{referrer_info}"
            )
            
            for admin_id in ADMIN_IDS:
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo_file.file_id,
                    caption=admin_message
                )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            if context.user_data.get('referrer_employee_id'):
                try:
                    employee_message = (
                        "üéâ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ VIP –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n"
                        f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '–ë–µ–∑ username'}\n"
                        f"–ü–ª–∞–Ω: {plan_names.get(plan, 'Unknown')}"
                    )
                    await context.bot.send_message(
                        chat_id=int(context.user_data['referrer_employee_id']),
                        text=employee_message
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            
            if lang == 'ru':
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –ø–ª–∞—Ç—ë–∂ –∏ –æ—Ç–∫—Ä–æ–µ–º –¥–æ—Å—Ç—É–ø.\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    reply_markup=create_main_menu_keyboard(lang, update.effective_user.id == ADMIN_ID)
                )
            else:
                await update.message.reply_text(
                    "Thank you! We will verify the payment and open access.\n"
                    "Await confirmation.",
                    reply_markup=create_main_menu_keyboard(lang, update.effective_user.id == ADMIN_ID)
                )
            return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã VIP: {e}")
        if lang == 'ru':
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await update.message.reply_text("An error occurred. Please try again.")
        return VIP_CLUB_PAYMENT

# –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
async def employee_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    lang = context.user_data.get('language', 'ru')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè† Main Menu"]:
        is_admin = update.effective_user.id == ADMIN_ID
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == 'ru' else "Main menu:",
            reply_markup=create_main_menu_keyboard(lang, is_admin)
        )
        return MAIN_MENU
    
    if text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚ûï Add Employee"]:
        if lang == 'ru':
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ Telegram ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "Enter the name and Telegram ID of the new employee (separated by comma):",
                reply_markup=ReplyKeyboardRemove()
            )
        return ADD_EMPLOYEE
    
    elif text in ["üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", "üìä View Referrals"]:
        referrals = db.get_referrals()
        employees = db.get_employees()
        
        if lang == 'ru':
            referrals_text = "–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:\n\n"
        else:
            referrals_text = "Referrals by employees:\n\n"
            
        for employee_id, client_list in referrals.items():
            employee_name = employees.get(employee_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' if lang == 'ru' else 'Unknown')
            referrals_text += f"{employee_name}: {len(client_list)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        
        if not referrals:
            referrals_text += "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç." if lang == 'ru' else "No referrals yet."
            
        await update.message.reply_text(referrals_text)
        return EMPLOYEE_MENU
    
    elif text in ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "üìà Employee Statistics"]:
        employees = db.get_employees()
        referrals = db.get_referrals()
        
        if lang == 'ru':
            stats_text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
        else:
            stats_text = "üìà Employee Statistics:\n\n"
        
        if not employees:
            stats_text += "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç." if lang == 'ru' else "No employees yet."
        else:
            for employee_id, employee_data in employees.items():
                name = employee_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' if lang == 'ru' else 'Unknown')
                referral_count = len(referrals.get(employee_id, []))
                stats_text += f"üë§ {name}\n"
                stats_text += f"   ID: {employee_id}\n"
                stats_text += f"   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_count}\n\n" if lang == 'ru' else f"   Referrals: {referral_count}\n\n"
        
        await update.message.reply_text(stats_text)
        return EMPLOYEE_MENU
    
    elif text in ["üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "üìã Employee List"]:
        employees = db.get_employees()
        
        if lang == 'ru':
            list_text = "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
        else:
            list_text = "üìã Employee List:\n\n"
        
        if not employees:
            list_text += "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç." if lang == 'ru' else "No employees yet."
        else:
            for employee_id, employee_data in employees.items():
                name = employee_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' if lang == 'ru' else 'Unknown')
                list_text += f"üë§ {name} (ID: {employee_id})\n"
        
        await update.message.reply_text(list_text)
        return EMPLOYEE_MENU
    
    elif text in ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üóëÔ∏è Delete Employee"]:
        if lang == 'ru':
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "Enter the Telegram ID of the employee to delete:",
                reply_markup=ReplyKeyboardRemove()
            )
        return DELETE_EMPLOYEE
    
    elif text in ["üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "üîó My Referral Link"]:
        employees = db.get_employees()
        user_id = str(update.effective_user.id)
        
        if user_id in employees:
            referral_link = employees[user_id].get('referral_link', '')
            if lang == 'ru':
                await update.message.reply_text(
                    f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{referral_link}\n\n–î–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏!"
                )
            else:
                await update.message.reply_text(
                    f"üîó Your referral link:\n\n{referral_link}\n\nShare it with clients!"
                )
        else:
            if lang == 'ru':
                await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.")
            else:
                await update.message.reply_text("You are not an employee.")
        return MAIN_MENU

async def delete_employee_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('language', 'ru')
    telegram_id = update.message.text.strip()
    
    try:
        employees = db.get_employees()
        if telegram_id in employees:
            db.remove_employee(telegram_id)
            if lang == 'ru':
                await update.message.reply_text(
                    f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {telegram_id} —É–¥–∞–ª–µ–Ω.",
                    reply_markup=create_main_menu_keyboard(lang, True)
                )
            else:
                await update.message.reply_text(
                    f"Employee with ID {telegram_id} deleted.",
                    reply_markup=create_main_menu_keyboard(lang, True)
                )
        else:
            if lang == 'ru':
                await update.message.reply_text(
                    f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=create_main_menu_keyboard(lang, True)
                )
            else:
                await update.message.reply_text(
                    f"Employee with ID {telegram_id} not found.",
                    reply_markup=create_main_menu_keyboard(lang, True)
                )
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        if lang == 'ru':
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        else:
            await update.message.reply_text("An error occurred.")
        return DELETE_EMPLOYEE

async def add_employee_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('language', 'ru')
    
    try:
        employee_data = update.message.text.split(',')
        if len(employee_data) != 2:
            if lang == 'ru':
                await update.message.reply_text("–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–∏–º—è,ID'")
            else:
                await update.message.reply_text("Error: use format 'name,ID'")
            return ADD_EMPLOYEE
            
        name = employee_data[0].strip()
        telegram_id = employee_data[1].strip()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        referral_code = str(uuid.uuid4())[:8]
        referral_link = f"https://t.me/cryptocrip_bot?start={referral_code}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_employee(telegram_id, name, referral_link)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        try:
            if lang == 'ru':
                employee_message = (
                    f"üéâ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫!\n"
                    f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
                    f"–î–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏."
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"
                )
            else:
                employee_message = (
                    f"üéâ You have been added as an employee!\n"
                    f"Your referral link:\n{referral_link}\n\n"
                    f"Share it with clients to earn commission."
                )
            
            await context.bot.send_message(
                chat_id=int(telegram_id),
                text=employee_message
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {telegram_id}: {e}")
        
        if lang == 'ru':
            await update.message.reply_text(
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"–ò–º—è: {name}\n"
                f"Telegram ID: {telegram_id}\n"
                f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.",
                reply_markup=create_main_menu_keyboard(lang, True)
            )
        else:
            await update.message.reply_text(
                f"Employee added!\n"
                f"Name: {name}\n"
                f"Telegram ID: {telegram_id}\n"
                f"Referral link sent to employee.",
                reply_markup=create_main_menu_keyboard(lang, True)
            )
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        if lang == 'ru':
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
        else:
            await update.message.reply_text("An error occurred. Check the input format.")
        return ADD_EMPLOYEE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async def handle_referral(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        return
    
    referral_code = context.args[0]
    employees = db.get_employees()
    
    for employee_id, data in employees.items():
        if data['referral_link'].endswith(referral_code):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add_referral(employee_id, str(update.effective_user.id))
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –≤ user_data
            context.user_data['referrer_employee_id'] = employee_id
            context.user_data['referrer_employee_name'] = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            break

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE_SELECT: [CallbackQueryHandler(language_callback)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)],
            TRADING_EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, experience_handler)],
            TRADING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_handler)],
            TRADING_SCREENSHOT: [MessageHandler(filters.PHOTO, screenshot_handler), MessageHandler(filters.TEXT & ~filters.COMMAND, screenshot_with_menu_handler)],
            VIP_PLAN_SELECT: [CallbackQueryHandler(vip_plan_callback)],
            VIP_CLUB_PAYMENT: [MessageHandler(filters.PHOTO, vip_screenshot_handler), MessageHandler(filters.TEXT & ~filters.COMMAND, vip_payment_menu_handler)],
            EMPLOYEE_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, employee_menu_handler)],
            ADD_EMPLOYEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_employee_handler)],
            DELETE_EMPLOYEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_employee_handler)],
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    application.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()